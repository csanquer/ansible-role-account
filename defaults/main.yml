---
account_groups: {}
  # <group>:
  #   gid:
  #   system: false

account_users: {}
  # <username>:
  #   name: <username> # required
  #   comment: # default = <username> : aka GECOS field ex.: Firstname Lastname
  #   home: # default = /home/<username>
  #   home_mode: #default = 'u=rwx,g=rx,o=rx'
  #   home_owner: # default = <username>
  #   home_group: # default = <username>
  #   no_chown_home: false
  #   system: no # is system user ?
  #   group: # primary group, default = <username>
  #   groups: [] # all user groups
  #   append_groups: yes # default yes
  #   shell: # ex.: /bin/bash or /bin/ash or /usr/bin/zsh
  #   env_vars:
  #     -
  #       name: <key>
  #       value: <value>
  #   uid:
  #   lock: false # lock password authentication : only ssh key authentication is allowed
  #   salt: # password salt, default = None
  #   config_files: []
  #     # -
  #     #   src: "home/{{ ansible_os_family|lower }}/.bashrc.j2" # relative path to role template directory
  #     #   dest: # default in /home/<username>/
  #     #   owner: # default = <username>
  #     #   group: # default = <username>
  #     #   mode: # default = 'u=rw,g=r,o=r'
  #     #   backup: yes
  #     #   force: no
  #     # -
  #     #   src: "home/.bash_aliases.j2"
  #     #   dest: # default in /home/<username>/
  #     # -
  #     #   src: "home/.zshrc.j2"
  #     #   dest: # default in /home/<username>/
  #     # -
  #     #   src: "{{ inventory_dir}}/templates/.my_custom_cfg.j2"
  #     #   dest: # default in /home/<username>/
  #  color_prompt: yes # force terminal color prompt
  #  ssh_agent_autostart: no # start ssh-agent session
  #  gitconfig:
  #     - { name: 'user.name', option: 'Martin Dupond'}
  #     - { name: 'user.email', option: 'martin.dupond@example.com'}
  #  bash_aliases:
  #     <alias>: <command>
  #  # extra bash shell lines at the end of ~/.bashrc
  #  bash_extra_lines: []
  #  # extra zsh shell lines at the end of ~/.bashrc
  #  zsh_extra_lines: []

account_env_vars: {}
  # <username>:
  #   -
  #     name: <key>
  #     value: <value>

# extra bash shell lines at the end of ~/.bashrc
account_bash_extra_lines: {}
  # <username>: []

# extra zsh shell lines at the end of ~/.bashrc
account_zsh_extra_lines: {}
  # <username>: []

account_user_passwords: {}
    # <username>: <password>

account_ssh_config: []
  # -
  #   user: <username>
  #   # SSH config path
  #   file: # default = /home/<user>/.ssh/config
  #   owner: # default = <username>
  #   group: # default = <username>
  #   force: yes
  #   configs:
  #       -
  #         comment:
  #         host:
  #         lines: []


ssh_known_hosts_hash_enabled: false
account_ssh_known_hosts: []
  # -
  #   user: <username>
  #   path: # default = /home/<user>/.ssh/known_hosts
  #   hosts: []
  #   type: [ rsa, dsa, ecdsa, ed25519 ]

# ssh key file in path  inventory_dir ~ '/' ~ ssh_public_keys_dir
account_default_authorized_keys: {}
  # <username>:
  #   - '<ssh-public-key1>'
  #   - '<ssh-public-key2>'
  #   - '<ssh-public-key3>'
  #   - '<ssh-public-key4>'

account_authorized_keys: {}
  # <username>:
  #   - '<ssh-public-key1>'
  #   - '<ssh-public-key2>'
  #   - '<ssh-public-key3>'
  #   - '<ssh-public-key4>'

account_s3_tmp_path: /root/s3_ssh_keys
account_s3_tmp_path_mode: 'u=rwx,g=rx,o='
account_s3_tmp_path_owner: root
account_s3_tmp_path_group: root

account_url_authorized_keys: []
  # -
  #   name: <username>
  #   urls:
  #     - '<ssh-public-key1-url>'
  #     - '<ssh-public-key2-url>'
  #     - '<ssh-public-key3-url>'
  #     - '<ssh-public-key4-url>'
  #   paths:
  #     - '<ssh-public-key1-path>'
  #     - '<ssh-public-key2-path>'
  #     - '<ssh-public-key3-path>'
  #     - '<ssh-public-key4-path>'
  #   s3:
  #     -
  #       bucket:
  #       object:
  #     or S3 URI
  #     - s3://bucket/object

account_ssh_keys_pairs: []
#   -
#     user: <username>
#     # private ssh key path
#     file: # default = /home/<user>/.ssh/id_rsa
#     # public ssh key
#     public_file:
#     # or
#     public: 'xxxxxxxxxxxxxxxx'
#     # private ssh key
#     private_file:
#     # or
#     private: |
#       xxxxxxxxxxxxxx
#       xxxxxxxxxxxxxx
#       xxxxxxxxxxxxxx
#     s3_public_file: s3://bucket/object
#     # or S3
#        bucket:
#        object:
#     s3_private_file: s3://bucket/object
#     # or S3
#        bucket:
#        object:
#     owner: # default = <username>
#     group: # default = <username>

sudo_cmd_aliases:
  SHELLS:    "/bin/sh, /bin/bash, /bin/dash, /usr/bin/rsh, /usr/bin/csh, /usr/bin/ksh, /usr/local/bin/tcsh, /usr/bin/zsh"
  SU:        "/bin/su"
  PASSWORD:  "/usr/bin/passwd"

sudo_files: []
  # - { sudogroup: 'admin', prefix: '01', command_user: 'ALL', nopasswd_commands: ['ALL'], commands: [] }


skel_templates:
  - { src: "etc/skel/{{ ansible_os_family|lower }}/.bash_logout.j2" }
  - { src: "etc/skel/{{ ansible_os_family|lower }}/.bashrc.j2" }
  - { src: "etc/skel/{{ ansible_os_family|lower }}/.bash_profile.j2", os_family: 'redhat' }
  - { src: "etc/skel/{{ ansible_os_family|lower }}/.profile.j2", os_family: 'debian' }
  - { src: "etc/skel/.git-prompt-colors.sh.j2" }
  - { src: "etc/skel/.zshrc.j2" }
  - { src: "etc/skel/.gitignore.j2" }
  - { src: "etc/skel/.gitconfig.j2" }
  - { src: "etc/skel/.bash_aliases.j2" }

root_templates:
  - { src: "root/{{ ansible_os_family|lower }}/.bashrc.j2", force: yes }
  - { src: "root/.bash_aliases.j2", force: yes }
  - { src: "etc/skel/.zshrc.j2", force: yes }

skel_default_bash_aliases:
  ackp: "ack --nocolor --pager=\"less -r\""
  at: "atom -a ."
  bc: "bc -l"
  clr: clear
  df: "df -hT --total"
  dir: "ls --color=auto --format=vertical"
  dk: docker
  dkc: docker-compose
  dkm: docker-machine
  dkrmexit: "docker rm $(docker ps -qa --no-trunc --filter \"status=exited\")"
  dkrmorph: "docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc)"
  dkrmvol: "docker volume rm $(docker volume ls -q --filter \"dangling=true\")"
  du: "du -h"
  duf: "du -sk * | sort -n | perl -ne '\\''($s,$f)=split(m{\\t});for (qw(K M G)) {if($s<1024) {printf(\"%.1f\",$s);print \"$_\\t$f\"; last};$s=$s/1024}'\\''"
  dufr: "du -sk * | sort -nr | perl -ne '\\''($s,$f)=split(m{\\t});for (qw(K M G)) {if($s<1024) {printf(\"%.1f\",$s);print \"$_\\t$f\"; last};$s=$s/1024}'\\''"
  dus: "du -s"
  egrep: "egrep --color=auto"
  emacs: "emacs -nw"
  fgrep: "fgrep --color=auto"
  findcrlf: "find . -not -type d -exec file \"{}\" \";\" | grep CRLF"
  findmac: "find . \\( -type d -name \"__MACOSX\" \\) -o \\( -type f -name \".DS_Store\" \\)"
  findsvn: "find . -type d -name .svn"
  findtextfiles: "find . -type f \\! -regex \".*\\.\\(jpg\\|ico\\|bmp\\|jpeg\\|png\\|svg\\|psd\\|swf\\|z\\|tar\\|zip\\|bz2\\|7z\\|gz\\|tgz\\|phar\\|jar\\)\" \\! -path \"*svn*\" \\! -path \"*.git/*\""
  findtilde: "find . -name \"*~\""
  fromdosr: "find . -type f \\! -regex \".*\\.\\(jpg\\|ico\\|bmp\\|jpeg\\|png\\|svg\\|psd\\|swf\\|z\\|tar\\|zip\\|bz2\\|7z\\|gz\\|tgz\\|phar\\|jar\\)\" \\! -path \"*svn*\" \\! -path \"*.git/*\" -exec fromdos {} \\;"
  grep: "grep --color=auto"
  kub: 'kubectl'
  l: "ls -CF"
  la: "ls -lhAF"
  ll: "ls -lhaF"
  lr: "ll -R"
  ls: "ls --color=auto"
  pip2upgrade: "sudo pip2 freeze --local | grep -v '\\''^\\-e'\\'' | cut -d = -f 1  | sudo xargs pip2 install -U"
  pip3upgrade: "sudo pip3 freeze --local | grep -v '\\''^\\-e'\\'' | cut -d = -f 1  | sudo xargs pip3 install -U"
  rmgit: "rm -rf `find . -type d -name .git`"
  rmkeepgit: "rm -rf `find . -not \\( -name '.git' -type d -prune \\) -type f `"
  rmkeepsvn: "rm -rf `find . -not \\( -name '.svn' -type d -prune \\) -type f `"
  rmmac: "rm -rf `find . \\( -type d -name \"__MACOSX\" \\) -o \\( -type f -name \".DS_Store\" \\)`"
  rmsvn: "rm -rf `find . -type d -name .svn`"
  rmt: trash-put
  rmtilde: "rm -f `find . -name \"*~\"`"
  sc: screen
  scdr: "screen -dR"
  scls: "screen -ls"
  screen: "screen -"
  suemacs: "sudo emacs -nw"
  suvi: "sudo vim"
  tf: "terraform"
  pk: "packer"
  tm: tmux
  tman: "if tmux has; then tmux attach -d; else tmux new; fi"
  tmls: "tmux ls"
  todosr: "find . -type f \\! -regex \".*\\.\\(jpg\\|ico\\|bmp\\|jpeg\\|png\\|svg\\|psd\\|swf\\|z\\|tar\\|zip\\|bz2\\|7z\\|gz\\|tgz\\|phar\\|jar\\)\" \\! -path \"*svn*\" \\! -path \"*.git/*\" -exec todos {} \\;"
  vdir: "ls --color=auto --format=long"
  vi: vim
  wanhost: 'curl -s ipinfo.io | jq -r .hostname'
  wanhost2: 'curl ifconfig.me/host'
  wanip: 'dig +short myip.opendns.com @resolver1.opendns.com'
  wanip2: 'dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d "\""'

skel_bash_aliases: {}


skel_gitignore:
  - '.svn'
  - '_svn'
  - '.CVS'
  - '.arch-params'
  - '.bzr'
  - '_darcs'
  - '.hg'
  - '.monotone'
  - '.DS_Store'
  - '__MACOSX'
  - '.directory'
  - '.settings'
  - '.buildpath'
  - '.project'
  - '.cache'
  - '.idea'
  - 'nbproject'
  - '.netbeans'
  - 'catalog.xml'
  - '*.geany'
  - '*~'

skel_gitconfig:
  color:
    ui: 'true'
  core:
    excludesfile: '~/.gitignore'
    autocrlf: 'input'
    editor: vim
  credential:
    helper: store
  commit:
    gpgsign: 'false'
  alias:
    # show aliases
    alias: '!git config --list | grep ''alias\\.'' | sed ''s/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/'' | sort'
    # make the current directory a new repo and commit the first import
    this: '!git init && git add . && git commit -m \"initial commit\"'
    # shortcuts
    cl: clone
    co: checkout
    br: branch
    ci: commit
    cim: commit -m
    cia: commit -a
    ciam: commit -am
    cip: commit -p
    ciap: commit -a -p
    st: status
    fc: fetch
    mg: merge
    rb: rebase
    rs: reset
    rv: revert
    pl: pull
    pr: pull --rebase
    ready: rebase -i @{u}
    ps: push
    sh: show --color-words
    df: diff
    hp: help
    man: help
    bs: bisect
    # a common task !!
    psom: push origin master
    # diff and log helpers
    staged: diff --cached
    dfc: diff --cached
    lg: log --graph --decorate --oneline
    lgp: log --graph --pretty=tformat:'%C(yellow)%h%Creset%C(auto)%d%Creset %s %C(blue)(%an)%Creset %C(yellow)%G?%Creset %Cgreen(%cd - %cr)%Creset' --abbrev-commit --date=local
    last: log -1 HEAD
    tip: log -n 1 --abbrev-commit --decorate
    changelog-html: log --no-merges --date=short --format='<li id=\"%h\"><time>%ad</time> %s</li>'
    changelog-md-full:  log --no-merges --date=short --format='* %h %ad %s (%cN)'
    changelog-md:  log --no-merges --date=short --format='* %ad %s'
    # sudmodules management
    subupdate: submodule update --init --recursive
    subup: submodule update --init --recursive
    cloner: clone --recursive
    clr: clone --recursive
    # add file to gitignore
    ignore: '"!sh -c ''([ ! -e .gitignore ] && touch .gitignore) | echo $1 >> .gitignore'' -"'
    # amend last not pushed commit
    fix: commit --amend
    amend: commit --amend
    # remove files from staging area (files to be committed)
    unstage: reset HEAD --
    us: reset HEAD --
    # discard changes (modified files but not to be committed)
    undo: checkout --
    discard: checkout --
    ds: checkout --
    un: checkout --
    # git remove manually deleted files
    rd: '!git ls-files -z --deleted | xargs -0 git rm'
    cf: cat-file -p
    # git 1.7 :  git upstream local_branch remote/branch
    #upstream: branch --set-upstream
    # git 1.8 : git upstream remote/branch local_branch
    upstream: branch -u
    pushtrack: push -u
  push:
    # default: matching
    default: upstream
