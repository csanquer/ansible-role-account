---
- name: create SSH known_hosts server list
  ansible.builtin.set_fact:
    ssh_known_hosts: "{{ ssh_known_hosts | default([]) + [ item.1 ] }}"
  with_subelements:
    - "{{ account_ssh_known_hosts }}"
    - hosts
    - { skip_missing: True }

- name: get SSH known_hosts server keys # noqa 301
  ansible.builtin.command: >
    ssh-keyscan {{ '-H ' if ssh_known_hosts_hash_enabled | default(false) | bool else '' }}-t
    {{ item.type | default(['rsa','dsa','ecdsa','ed25519']) | join(',') }} {{ item }}
  register: ssh_known_hosts_key_result
  loop: "{{ ssh_known_hosts | default([]) | unique }}"

- name: create SSH known_hosts server keys list
  ansible.builtin.set_fact:
    ssh_known_hosts_keys: "{{ ssh_known_hosts_keys | default({})|combine({ item.item : item.stdout }) }}"
  loop: "{{ ssh_known_hosts_key_result.results | default([]) }}"

- name: create ssh keys directory for known host files
  ansible.builtin.file:
    path: "{{ item.path | default(( '/' if  item.user == 'root' else '/home/' ) ~ item.user ~ '/.ssh/known_hosts')|dirname }}"
    state: directory
    mode: 'u=rwX,g=r,o='
    owner: "{{ item.owner | default(item.user) }}"
    group: "{{ item.group | default(item.user) }}"
  loop: "{{ account_ssh_known_hosts }}"

- name: add SSH server keys to known host files
  ansible.builtin.known_hosts:
    path: "{{ item.0.path | default(( '/' if  item.0.user == 'root' else '/home/' ) ~ item.0.user ~ '/.ssh/known_hosts') }}"
    name: "{{ item.1 }}"
    key: "{{  ssh_known_hosts_keys[item.1] }}"
    state: present
  with_subelements:
    - "{{ account_ssh_known_hosts }}"
    - hosts
    - { skip_missing: True }

- name: create SSH config files
  ansible.builtin.template:
    src: "home/ssh/config.j2"
    dest: "{{ (item.file | default('/home/' ~ item.user ~ '/.ssh/config')) }}"
    owner: "{{ item.owner | default(item.user) }}"
    group: "{{ item.group | default(item.user) }}"
    mode: 'u=rw,g=r,o=r'
    backup: yes
    force: "{{ item.force | default('yes') }}"
  loop: "{{ account_ssh_config }}"

# remove all keys and add the new keys
# merge account_authorized_keys and account_default_authorized_keys values
- name: Set up SSH authorized_keys
  ansible.posix.authorized_key:
    user: "{{ item.key }}"
    key: "{% for sshkey in ((account_default_authorized_keys[item.key] | default([])) + (item.value | default([])) )  | unique | sort %}{{ sshkey }}{% if not loop.last %}{{ '\n' }}{% endif %}{% endfor %}"
    state: present
    exclusive: true
  no_log: True
  loop: "{{ account_authorized_keys | dict2items }}"

- name: Set up SSH authorized_keys from URL
  ansible.posix.authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
    state: present
  no_log: True
  with_subelements:
    - "{{ account_url_authorized_keys }}"
    - urls
    - { skip_missing: True }

- name: Set up SSH authorized_keys from files
  ansible.posix.authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ lookup('file', item.1) }}"
    state: present
  no_log: True
  with_subelements:
    - "{{ account_url_authorized_keys }}"
    - paths
    - { skip_missing: True }

- name: create ssh keys directory for keys to copy
  ansible.builtin.file:
    path: "{{ (item.file | default('/home/' ~ item.user ~ '/.ssh/id_rsa')) | dirname }}"
    state: directory
    mode: 'u=rwX,g=r,o='
    owner: "{{ item.owner | default(item.user) }}"
    group: "{{ item.group | default(item.user) }}"
  no_log: True
  loop: "{{ account_ssh_keys_pairs }}"

- name: copy ssh public keys content
  ansible.builtin.copy:
    content: '{{ item.public | trim }}'
    dest: "{{ (item.file | default('/home/' ~ item.user ~ '/.ssh/id_rsa')) ~ '.pub' }}"
    owner: "{{ item.owner | default(item.user) }}"
    group: "{{ item.group | default(item.user) }}"
    mode: 'u=rw,g=r,o='
    backup: no
    force: yes
  no_log: True
  when: item.public is defined and item.public is not none and item.public
  loop: "{{ account_ssh_keys_pairs }}"

- name: copy ssh private keys content
  ansible.builtin.copy:
    content: "{{ item.private | trim }}{{'\n'}}"
    dest: "{{ (item.file | default('/home/' ~ item.user ~ '/.ssh/id_rsa')) }}"
    owner: "{{ item.owner | default(item.user) }}"
    group: "{{ item.group | default(item.user) }}"
    mode: 'u=rw,g=,o='
    backup: no
    force: yes
  no_log: True
  when: item.private is defined and item.private is not none and item.private
  loop: "{{ account_ssh_keys_pairs }}"

- name: copy ssh public keys file
  ansible.builtin.copy:
    src: '{{ item.public_file }}'
    dest: "{{ (item.file | default('/home/' ~ item.user ~ '/.ssh/id_rsa')) ~ '.pub' }}"
    owner: "{{ item.owner | default(item.user) }}"
    group: "{{ item.group | default(item.user) }}"
    mode: 'u=rw,g=r,o='
    backup: no
    force: yes
  no_log: True
  when: item.public_file is defined and item.public_file is not none and item.public_file
  loop: "{{ account_ssh_keys_pairs }}"

- name: copy ssh private keys file
  ansible.builtin.copy:
    src: '{{ item.private_file }}'
    dest: "{{ (item.file | default('/home/' ~ item.user ~ '/.ssh/id_rsa')) }}"
    owner: "{{ item.owner | default(item.user) }}"
    group: "{{ item.group | default(item.user) }}"
    mode: 'u=rw,g=,o='
    backup: no
    force: yes
  no_log: True
  when: item.private_file is defined and item.private_file is not none and item.private_file
  loop: "{{ account_ssh_keys_pairs }}"

- include: ssh_aws_s3.yml
